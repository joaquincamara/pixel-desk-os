{"version":3,"sources":["assets/pixel-desk-logo.svg","assets/zelda.mp3","assets/castlevania.mp3","assets/pokemon.mp3","assets/pixel-desk-icon.svg","utils/When.jsx","views/initSystem/InitSystem.jsx","components/molecules/navbar/Navbar.jsx","views/homDesk/HomeDesl.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","When","predicate","children","shuffledMusic","zeldaMusic","castlevaniaMusic","pokemonMusic","map","a","sort","Math","random","value","b","Initsystem","useState","progressPercentage","setProgressPercentage","history","useHistory","useEffect","setTimeout","clearTimeout","id","handleInitSystem","event","key","push","React","window","addEventListener","removeEventListener","className","src","PixelDeskLogo","alt","max","hidden","controls","autoPlay","Navbar","isMenuActive","setIsMenuActive","moment","format","date","setDate","timerID","setInterval","clearInterval","onClick","ShutDownImage","disabled","HomeDesk","App","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,iBCA3CD,EAAOC,QAAU,IAA0B,6C,wTCE9BC,EAAO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAChC,OAAID,EAAkB,oCAAGC,GAClB,sCCOHC,G,MADQ,CAACC,IAAYC,IAAkBC,KAE1CC,KAAI,SAACC,GAAD,MAAQ,CAAEC,KAAMC,KAAKC,SAAUC,MAAOJ,MAC1CC,MAAK,SAACD,EAAGK,GAAJ,OAAUL,EAAEC,KAAOI,EAAEJ,QAC1BF,KAAI,SAACC,GAAD,OAAOA,EAAEI,UAEHE,EAAa,WACxB,IAD8B,EAMsBC,mBAAS,GAN/B,mBAMvBC,EANuB,KAMHC,EANG,KAOxBC,EAAUC,cAEhBC,qBAAU,WASR,OAJIJ,EAXc,KAYhBK,YALqB,WACrBJ,EAAsBD,EAVb,KACI,IAgBRM,kBAdLC,KAeD,CAACP,OAfAO,IAiBJ,IAAMC,EAAmB,SAACC,GACxB,GAAkB,UAAdA,EAAMC,IACR,OAAOR,EAAQS,KAAK,UAYxB,OARAC,IAAMR,WAAU,WAGd,OAFAS,OAAOC,iBAAiB,UAAWN,GAE5B,WACLK,OAAOE,oBAAoB,UAAWP,MAEvC,IAGD,yBAAKQ,UAAU,eACb,yBAAKC,IAAKC,IAAeC,IAAI,oBAC7B,8BAAUC,IAAI,MAAMxB,MAAOI,IAC3B,kBAAC,EAAD,CAAMf,UAAkC,MAAvBe,GACf,uBAAGgB,UAAU,YAAb,yBACA,2BAAOK,QAAM,EAACJ,IAAK9B,EAAc,GAAImC,UAAQ,EAACC,UAAQ,O,kCCjDjDC,G,YAAS,WAAO,IAAD,EACczB,oBAAS,GADvB,mBACnB0B,EADmB,KACLC,EADK,OAEF3B,mBAAS4B,MAASC,OAAO,uBAFvB,mBAEnBC,EAFmB,KAEbC,EAFa,KAe1B,OAXA1B,qBAAU,WACR,IAAI2B,EAAUC,aAAY,WAO1BF,EAAQH,MAASC,OAAO,6BAPuB,KAC/C,OAAO,WACLK,cAAcF,MAEf,CAACF,IAOF,yBAAKb,UAAU,UACb,yBAAKA,UAAU,kBACb,4BACEkB,QAAS,kBAAMR,GAAiBD,IAChCT,UAAU,mBAEV,yBAAKC,IAAKkB,IAAehB,IAAI,eAE/B,yBACEE,OAAQI,EACRT,UAAWS,EAAe,GAAK,0BAE/B,0CACA,2CACA,iDACA,wCACA,uCACA,sCACA,uBAAGT,UAAU,qCAAb,eAIJ,4BAAQoB,UAAQ,EAACpB,UAAU,0BACxBa,MC1CIQ,G,MAAW,WACtB,OACE,yBAAKrB,UAAU,aACb,kBAAC,EAAD,SCWSsB,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,IAAD,CAAYuB,SAAS,KACnB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjC,kBAAC,IAAD,CAAO2C,KAAK,QAAQC,UAAWL,OCDnBM,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a64857f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pixel-desk-logo.b8b0651d.svg\";","module.exports = __webpack_public_path__ + \"static/media/zelda.35e5073a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/castlevania.b084d6a5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/pokemon.ad18d75f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/pixel-desk-icon.1294995d.svg\";","import React from 'react';\n\nexport const When = ({ predicate, children }) => {\n  if (predicate) return <>{children}</>;\n  return <></>;\n};\n","import React, { useState, useEffect } from 'react';\nimport PixelDeskLogo from '../../assets/pixel-desk-logo.svg';\nimport zeldaMusic from '../../assets/zelda.mp3';\nimport castlevaniaMusic from '../../assets/castlevania.mp3';\nimport pokemonMusic from '../../assets/pokemon.mp3';\nimport { useHistory } from 'react-router-dom';\nimport { When } from '../../utils/When';\n\nimport './initSystem.scss';\n\nconst music = [zeldaMusic, castlevaniaMusic, pokemonMusic];\nconst shuffledMusic = music\n  .map((a) => ({ sort: Math.random(), value: a }))\n  .sort((a, b) => a.sort - b.sort)\n  .map((a) => a.value);\n\nexport const Initsystem = () => {\n  const step = 1;\n  const interval = 30;\n  const maxProgress = 100;\n  let id;\n\n  const [progressPercentage, setProgressPercentage] = useState(0);\n  const history = useHistory();\n\n  useEffect(() => {\n    const updateProgress = () => {\n      setProgressPercentage(progressPercentage + step);\n    };\n\n    if (progressPercentage < maxProgress) {\n      setTimeout(updateProgress, interval);\n    }\n\n    return clearTimeout(id);\n  }, [progressPercentage, id]);\n\n  const handleInitSystem = (event) => {\n    if (event.key === 'Enter') {\n      return history.push('/home');\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleInitSystem);\n\n    return () => {\n      window.removeEventListener('keydown', handleInitSystem);\n    };\n  }, []);\n\n  return (\n    <div className='init-system'>\n      <img src={PixelDeskLogo} alt='Pixel-Desk-Logo' />\n      <progress max='100' value={progressPercentage} />\n      <When predicate={progressPercentage === 100}>\n        <p className='blinking'>Press ENTER to Log-in</p>\n        <audio hidden src={shuffledMusic[0]} controls autoPlay />\n      </When>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport ShutDownImage from '../../../assets/pixel-desk-icon.svg';\n\nimport '98.css';\nimport './navbar.scss';\n\nexport const Navbar = () => {\n  const [isMenuActive, setIsMenuActive] = useState(true);\n  const [date, setDate] = useState(moment().format('MM/DD/YY h:mm:ss a'));\n\n  useEffect(() => {\n    let timerID = setInterval(() => handleClock(), 1000);\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  }, [date]);\n\n  function handleClock() {\n    setDate(moment().format('MM / DD / YY h:mm:ss a'));\n  }\n\n  return (\n    <div className='navbar'>\n      <div className='navbar__dropup'>\n        <button\n          onClick={() => setIsMenuActive(!isMenuActive)}\n          className='navbar__dropbtn'\n        >\n          <img src={ShutDownImage} alt='Shut-down' />\n        </button>\n        <div\n          hidden={isMenuActive}\n          className={isMenuActive ? '' : 'navbar__dropup-content'}\n        >\n          <p>System info</p>\n          <p>Music player</p>\n          <p>Video game console</p>\n          <p>Documents</p>\n          <p>Settings</p>\n          <p>Notepad</p>\n          <p className='navbar__dropup-content__shut-down'>Shut Down</p>\n        </div>\n      </div>\n\n      <button disabled className='navbar__dropbtn-active'>\n        {date}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Navbar } from '../../components/molecules/navbar/Navbar';\n\nimport './homeDesk.scss';\n\nexport const HomeDesk = () => {\n  return (\n    <div className='home-desk'>\n      <Navbar />\n    </div>\n  );\n};\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { Initsystem } from './views/initSystem/InitSystem';\nimport { HomeDesk } from './views/homDesk/HomeDesl';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <HashRouter basename='/'>\n        <Route exact path='/' component={Initsystem} />\n        <Route path='/home' component={HomeDesk} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}